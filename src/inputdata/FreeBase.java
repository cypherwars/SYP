package inputdata;import java.awt.Image;import java.awt.image.BufferedImage;import java.awt.image.PixelGrabber;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.net.MalformedURLException;import java.net.URISyntaxException;import java.net.URL;import java.net.URLEncoder;import java.util.ArrayList;import java.util.Dictionary;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.Map.Entry;import javax.swing.ImageIcon;import org.apache.http.HttpResponse;import org.apache.http.ParseException;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.util.EntityUtils;import org.json.simple.JSONArray;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import com.hp.hpl.jena.ontology.Individual;import com.hp.hpl.jena.ontology.ObjectProperty;import com.hp.hpl.jena.ontology.OntClass;import com.hp.hpl.jena.ontology.OntModel;import com.hp.hpl.jena.ontology.OntModelSpec;import com.hp.hpl.jena.ontology.OntProperty;import com.hp.hpl.jena.query.Query;import com.hp.hpl.jena.query.QueryExecution;import com.hp.hpl.jena.query.QueryExecutionFactory;import com.hp.hpl.jena.query.QueryFactory;import com.hp.hpl.jena.query.QuerySolution;import com.hp.hpl.jena.rdf.model.InfModel;import com.hp.hpl.jena.rdf.model.ModelFactory;import com.hp.hpl.jena.rdf.model.NodeIterator;import com.hp.hpl.jena.rdf.model.Property;import com.hp.hpl.jena.rdf.model.RDFNode;import com.hp.hpl.jena.rdf.model.ResIterator;import com.hp.hpl.jena.rdf.model.StmtIterator;import com.hp.hpl.jena.rdf.model.Resource;import com.hp.hpl.jena.rdf.model.Statement;import com.hp.hpl.jena.reasoner.Reasoner;import com.hp.hpl.jena.reasoner.ReasonerFactory;import com.hp.hpl.jena.reasoner.ValidityReport;import com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasonerFactory;import com.hp.hpl.jena.util.FileManager;import com.narphorium.freebase.query.Parameter;import com.narphorium.freebase.query.io.QueryParser;import com.narphorium.freebase.results.Result;import com.narphorium.freebase.results.ResultSet;import com.narphorium.freebase.services.ReadService;import com.narphorium.freebase.services.exceptions.FreebaseServiceException;import com.sun.image.codec.jpeg.*;public class FreeBase {	 static UserProfile profile ;//= readUserProfile("KshitijShah");	 static ReturnFormat returnformat = new ReturnFormat(); 	 static ArrayList<Information> fbinfo=new ArrayList<Information>();	       public static void main(String[] args) {		   	try {			   				    start("nokia_e63","KshitijShah");    	    //search();		   	//	never();		   	}		   	catch (Exception e) {				// TODO: handle exception		   		e.printStackTrace();			}	}	       public static ArrayList<Information> start(String searchdata,String UserName)      {    	  try {			    		  profile = readUserProfile(UserName);  			topicSearch("/en/"+searchdata);		       	       	for(String temp :returnformat.type)  	    	{  	    		findSimilar(temp);  	    	}	      	      	       	Set<String> keyset = returnformat.typeResources.keySet();  	       	for(String temp : keyset)  	       	{   	       		 returnformat.userData.put(temp,matchWithUserProfile(temp));  	       	}  	       	keyset = returnformat.userData.keySet();  	         	       	for(String temp:keyset)   	       	{  	       		String temp2 =  findWithName(returnformat.userData.get(temp),temp);  	       		returnformat.typeResources.get(temp).add(temp2);  	       		  	       	}  	       	/*	Iterator<Entry<String, ArrayList<String>>> it = returnformat.typeResources.entrySet().iterator();		  	    	while (it.hasNext()) {  	    	        Map.Entry<String,ArrayList<String>> pairs = (Map.Entry<String,ArrayList<String>>)it.next();  	    	        System.out.println(pairs.getKey() + " = " + pairs.getValue());	    	        	    	    }  	    	*/      	    	for(String temp:keyset)  	    	{ int count = 0;  	    	    System.out.println(temp);  	    		for (int i = 0 ;i <returnformat.typeResources.get(temp).size();i++)  	    		{   	    			count++;  	    			if(count > 5)  	    				break;  	    			//System.out.println(returnformat.typeResources.get(temp).get(i));  	    			Information information = gatherInformation(returnformat.typeResources.get(temp).get(i));  	    			if(information.thumbnail.length() > 1)  	  	    				//getImage(information.thumbnail);  	    			fbinfo.add(information);  	    		//	System.out.println(information.printdata());  	    		//	System.out.println("\n");  	    			//	  	    		}	  	    	}  	    	//System.out.println(gatherInformation(searchdata).printdata());  	    	return fbinfo;  			  		} catch (Exception e) {  			  			//e.printStackTrace();  			return null;  		}       }	        public  static void now()	    {	        String sparqlQueryString =  "PREFIX owl: <http://www.w3.org/2002/07/owl#>"+	        							"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>"+	        							"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"+	        							"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"+	        							"PREFIX foaf: <http://xmlns.com/foaf/0.1/>"+	        							"PREFIX dc: <http://purl.org/dc/elements/1.1/>"+	        							"PREFIX : <http://dbpedia.org/resource/>"+	        							"PREFIX dbpedia2: <http://dbpedia.org/property/>"+	        							"PREFIX dbpedia: <http://dbpedia.org/>"+	        							"PREFIX skos: <http://www.w3.org/2004/02/skos/core#>"+	        							"SELECT ?title WHERE {?game <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:First-person_shooters> .    ?game foaf:name ?title .}ORDER by ?title";	        Query query =  QueryFactory.create(sparqlQueryString);	        QueryExecution qexec = QueryExecutionFactory.sparqlService("http://dbpedia.org/sparql",query);	        try {	            com.hp.hpl.jena.query.ResultSet results = qexec.execSelect();	            for ( ; results.hasNext() ; )	        {	            QuerySolution soln = results.nextSolution() ;	            String x = soln.get("?title").toString();	            System.out.print(x +"\n");	        }	        }	        finally { qexec.close() ; }	        }	 	 public static  void never()	 {		 HttpClient httpClient = new DefaultHttpClient();			 ReadService readService = null;		try {			readService = new ReadService(new URL("http://sandbox.freebase.com/api"),httpClient);		} catch (MalformedURLException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		 QueryParser queryParser = new QueryParser();		 String queryText = "[{ \"album:album\": [], \"name\": \"Sonu Nigam\", \"type\": \"/music/artist\" }]";		 		 		 com.narphorium.freebase.query.Query query = queryParser.parse("q1", queryText );		// System.out.println(query.getData().toString());		 		 List<Parameter> temp = query.getParameters();		 for(Parameter p : temp)		 {			 System.out.println(p.getName());					 }		 		 try {		 	ResultSet results = readService.read(query);		 	System.out.println(query.toJSON());		 	if(results.isEmpty())System.out.println("Empty");		 	while (results.hasNext()) {		 				 		Result result = results.next();				 		System.out.println(results.toString());		 		ArrayList<String> albumslist = (ArrayList<String>)result.getObject("album");		 	    for(String s : albumslist)		 	    {		 	    			 	    System.out.println(s);		 	    }		 		 	}		 } catch (IOException e) {		 	e.printStackTrace();		 } catch (FreebaseServiceException e) {		 	e.printStackTrace();		 } }		 public static void search() throws ClientProtocolException, IOException, URISyntaxException, ParseException, org.json.simple.parser.ParseException	{				 		 String query = "madonna";		 String service_url = "http://api.freebase.com/api/service/search";		 String url = service_url  + "?query=madonna" ;		 					 HttpClient httpclient = new DefaultHttpClient();   		 HttpResponse response = httpclient.execute(new HttpGet(url));  		        		 JSONParser parser = new JSONParser();		 JSONObject json_data = (JSONObject)parser.parse(EntityUtils.toString(response.getEntity()));		 JSONArray results = (JSONArray)json_data.get("result");		 		 System.out.println(results.toString());		 for (Object planet : results) {		   System.out.println(((JSONObject)planet).get("name"));		 }			}		 public static void getImage(String thumbnail) throws ClientProtocolException, IOException, ParseException, org.json.simple.parser.ParseException	 {		 String service_url = thumbnail;//"http://api.freebase.com/api/trans/image_thumb/guid/9202a8c04000641f8000000003ac7f48";		 String url = service_url;		 					 HttpClient httpclient = new DefaultHttpClient();   		 HttpResponse response = httpclient.execute(new HttpGet(url));  		      				 byte[] temp =  (EntityUtils.toByteArray(response.getEntity()));		  		 ImageIcon imgicon = new ImageIcon(temp,"Iamge temp");		 Image img = imgicon.getImage();		 BufferedImage bimg = null;		 int w = img.getWidth(null);		 int h = img.getHeight(null);		 int [] pixels = new int[w * h];		 PixelGrabber pg = new PixelGrabber(img,0,0,w,h,pixels,0,w);		 try { 		   pg.grabPixels(); 		   } 		 catch(InterruptedException ie) { 		   ie.printStackTrace();		   }		 bimg = new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);		 bimg.setRGB(0,0,w,h,pixels,0,w);		 String filename = thumbnail.substring(thumbnail.lastIndexOf('/') + 1,thumbnail.length());		 // Encode as a JPEG		 System.out.println(filename);		 FileOutputStream fos = new FileOutputStream("F:\\freebase\\"+filename + ".jpg");				 		 JPEGImageEncoder jpeg = JPEGCodec.createJPEGEncoder(fos);		 jpeg.encode(bimg);		 fos.close();	 }	 	 public static void topicSearch(String id) throws ClientProtocolException, IOException, ParseException, org.json.simple.parser.ParseException	 {		  		 String service_url = "http://api.freebase.com/api/experimental/topic/standard?id="+id;		 String url = service_url ;		 					 HttpClient httpclient = new DefaultHttpClient();   		 HttpResponse response = httpclient.execute(new HttpPost(url));  				 		 JSONParser parser = new JSONParser();		 		 JSONObject json_data = (JSONObject)parser.parse(EntityUtils.toString(response.getEntity())); 		 JSONObject object = (JSONObject) json_data.get(id);								 JSONObject object2 = (JSONObject)object.get("result");				 JSONArray type = (JSONArray)object2.get("type");		 ArrayList<String> types = new ArrayList<String>();		 for(Object temp : type)		 {			types.add(((JSONObject)temp).get("id").toString());		 }		  			     returnformat.type = types;	 }	 	 public static void findSimilar(String type) throws ClientProtocolException, IOException, ParseException, org.json.simple.parser.ParseException	 {				String query = "[{" +		 		"\"id\":null," +		 		"\"name\":null," +		 		"\"type\":\""+type+"\"}]";			    String query_envelope = "{\"query\":" + query + "}";		 		 String service_url = "http://api.freebase.com/api/service/mqlread";		 		 String url = service_url  + "?query=" + URLEncoder.encode(query_envelope, "UTF-8");		 					 HttpClient httpclient = new DefaultHttpClient();   		 HttpResponse response = httpclient.execute(new HttpGet(url));  		        		 JSONParser parser = new JSONParser();		 JSONObject json_data = (JSONObject)parser.parse(EntityUtils.toString(response.getEntity()));		 JSONArray results = (JSONArray)json_data.get("result");		 ArrayList<String> resources = new ArrayList<String>();				 int c=0;		 for (Object temp : results) {			// if(c%2==0)			// {			// c++;	   		resources.add(((JSONObject)temp).get("id").toString());			// }	   }		 returnformat.typeResources.put(type, resources);		 		 	 }     	 public static String findWithName(String name,String type) throws ClientProtocolException, IOException, ParseException, org.json.simple.parser.ParseException	 {		  		 if(name==""||type.equalsIgnoreCase(""))		 {			 return "";		 }			String query = "[{" +			 		"\"name\":\""+name+"\"," +			 		"\"id\":null," +			 		"\"type\":\""+type+"\"}]";						 String query_envelope = "{\"query\":" + query + "}";			 			 String service_url = "http://api.freebase.com/api/service/mqlread";			 			 String url = service_url  + "?query=" + URLEncoder.encode(query_envelope, "UTF-8");			 						 HttpClient httpclient = new DefaultHttpClient();   			 HttpResponse response = httpclient.execute(new HttpGet(url));  			        			 JSONParser parser = new JSONParser();			 JSONObject json_data = (JSONObject)parser.parse(EntityUtils.toString(response.getEntity()));					 JSONArray results = (JSONArray)json_data.get("result");			 					 			 for (Object temp : results) {				 return(((JSONObject)temp).get("id").toString());		   						 }			 return "";	}	 	 public static Information gatherInformation(String id) throws ClientProtocolException, IOException, ParseException, org.json.simple.parser.ParseException	{		 String service_url = "http://api.freebase.com/api/experimental/topic/standard?id="+id;		 String url = service_url ;		 					 HttpClient httpclient = new DefaultHttpClient();   		 HttpResponse response = httpclient.execute(new HttpPost(url));  				 		 JSONParser parser = new JSONParser();		 		 JSONObject json_data = (JSONObject)parser.parse(EntityUtils.toString(response.getEntity()));		 				 		 JSONObject object = (JSONObject) json_data.get(id);								 JSONObject object2 = (JSONObject)object.get("result");		 ArrayList<String> alias = (ArrayList<String>)object2.get("alias");		 JSONArray type = (JSONArray)object2.get("type");		Information information = new Information();		information.alias = alias;		if(object2.containsKey("id"))		information.id = object2.get("id").toString();		if(object2.containsKey("text"))		information.text = object2.get("text").toString();		if(object2.containsKey("thumbnail"))		information.thumbnail = object2.get("thumbnail").toString();		if(object2.containsKey("url"))		information.url = object2.get("url").toString();		if(object2.containsKey("description"))		information.Description = object2.get("description").toString();	/*	if(object2.containsKey("properties"))		{						JSONObject myobject = (JSONObject) object2.get("properties");			JSONObject myarray2 = (JSONObject) ((JSONObject)(myobject)).get("/book/author/works_written");						JSONArray ashu = (JSONArray) ((JSONObject)myarray2).get("values");			for(Object t : ashu)			{				JSONObject j = (JSONObject)(t);				if(j.containsKey("text"))					System.out.println(j.get("text").toString());			}					}*/				return information;	   	   	}		 public static String matchWithUserProfile(String type)	 {			 if(type.equalsIgnoreCase("/dining/restaurant")){			 			 return profile.eateries.restaurant;			 }		 else if(type.equalsIgnoreCase("/dining/cuisine")){   		return profile.eateries.cuisine;		 }		 else if(type.equalsIgnoreCase("/food/dish")){			return profile.eateries.dish;		 }		 else if(type.equalsIgnoreCase("/food/diet")){			return profile.eateries.preference;		 }		 else if(type.equalsIgnoreCase("/sports/sports_team")){						return profile.sports.club;		 }		 else if(type.equalsIgnoreCase("/sports/pro_athlete")){						  return profile.sports.sportsman;		 }		 else if(type.equalsIgnoreCase("/sports/sport")){			 return profile.sports.sport;		 }		 else if(type.equalsIgnoreCase("/music/track")){		return profile.music.song;		 }		 else if(type.equalsIgnoreCase("/music/genre")){			return profile.music.genreMusic;		 }				 else if(type.equalsIgnoreCase("/music/artist") || type.equalsIgnoreCase("/music/musician") ){		   return profile.music.artist;			 }		 else if(type.equalsIgnoreCase("/music/album")){			 return profile.music.album;		 }		 else if(type.equalsIgnoreCase("/book/book_subject")){							return profile.reading.genreReading;		 }		 else if(type.equalsIgnoreCase("/book/newspaper")){								return profile.reading.news;		 }		 else if(type.equalsIgnoreCase("/book/magazine")){			return profile.reading.magazine; 		 }		 else if(type.equalsIgnoreCase("/book/book")){				return profile.reading.book;		 }		 else if(type.equalsIgnoreCase("/internet/blog")){						  return profile.reading.blog;		 }		 else if(type.equalsIgnoreCase("/book/author")){			return profile.reading.author;		 }				 else if(type.equalsIgnoreCase("/film/actor")){			return profile.movies.actor;			 }		 else if(type.equalsIgnoreCase("/film/director")){		return profile.movies.director;		 }		 else if(type.equalsIgnoreCase("/film/film")){			return profile.movies.movie;		 }		 else if(type.equalsIgnoreCase("/film/film_genre")){			return profile.movies.genreMovie;		 }		 else		 {			 return "";		 }	 }	 	 public static UserProfile readUserProfile(String userName)	 {		 OntModel model = ModelFactory.createOntologyModel();						InputStream stream = FileManager.get().open("F:\\eclipse helios ws\\WebApp2\\WebContent\\UserData.owl");						String uri = "http://www.semanticweb.org/ontologies/2011/2/Ontology1299586091336.owl#";						model.read(stream,uri);					 if(model.isEmpty())		 {			 System.out.println("Model Empty");		 }		String URI = uri+"KshitijShah";		 Individual individual =  model.getIndividual(URI);		/* StmtIterator iterator =  individual.listProperties();				 while(iterator.hasNext())		 {			 System.out.println(iterator.next());		 }		 */		    ContactInformation cinfo = new ContactInformation();		 	Location loc  = new Location();		 	Reading Reading = new Reading();		 	Movies Movies = new Movies();			 	Music Music = new Music();			 	Sports Sports = new Sports();		 	Eateries Eateries = new Eateries();			 	UserProfile profile = new UserProfile();		 		 		 Property name = model.getOntProperty(uri+"name");		 Statement stmt = individual.getProperty(name);		 profile.name = stmt.getString();		 		 Property age = model.getOntProperty(uri+"age");		  stmt = individual.getProperty(age);		 profile.age = stmt.getString();		 		 Property gender = model.getOntProperty(uri+"gender");		  stmt = individual.getProperty(gender);		 profile.gender = stmt.getString();		 		 Property nationality = model.getOntProperty(uri+"nationality");		  stmt = individual.getProperty(nationality);		 profile.nationality =stmt.getString();			 		 Property profession = model.getOntProperty(uri+"profession");		 stmt = individual.getProperty(profession);		 profile.profession = stmt.getString();				 Property dateofbirth = model.getOntProperty(uri+"dob");		 stmt = individual.getProperty(dateofbirth);		 profile.dateofbirth = stmt.getString();		 		 ObjectProperty likesReading = model.getObjectProperty(uri+"likesReading");		 Resource reading =  individual.getPropertyResourceValue(likesReading);		 ObjectProperty likesSports = model.getObjectProperty(uri+"likesSports");		 Resource sports =  individual.getPropertyResourceValue(likesSports);		 ObjectProperty likesMovies = model.getObjectProperty(uri+"likesMovies");		 Resource movies = individual.getPropertyResourceValue(likesMovies);		 ObjectProperty likesMusic = model.getObjectProperty(uri+"likesMusic");		 Resource music =  individual.getPropertyResourceValue(likesMusic);		 ObjectProperty likesEating = model.getObjectProperty(uri+"likesEating");		 Resource eating =  individual.getPropertyResourceValue(likesEating);		 ObjectProperty hasLocation = model.getObjectProperty(uri+"hasLocation");		 Resource location = individual.getPropertyResourceValue(hasLocation);		 ObjectProperty hasContactInformation = model.getObjectProperty(uri+"hasContactInformation");		 Resource contactInformation = individual.getPropertyResourceValue(hasContactInformation);		 		 Property currentLocation = model.getOntProperty(uri+"currentLocation");		 stmt = location.getProperty(currentLocation);		 loc.current_location = stmt.getString();		 		 Property residentialLocation = model.getOntProperty(uri+"residentialLocation");		 stmt = location.getProperty(residentialLocation);		 loc.residential_location = stmt.getString();		 		 Property occupationalLocation = model.getOntProperty(uri+"occupationalLocation");		 stmt = location.getProperty(occupationalLocation);		 loc.occupational_location = stmt.getString();		 		 Property email = model.getOntProperty(uri+"email");		 stmt =  contactInformation.getProperty(email);		 cinfo.emailid = stmt.getString();		 		 Property landline = model.getOntProperty(uri+"landline");		 stmt = contactInformation.getProperty(landline);		 cinfo.landline = stmt.getString();		 		 Property mobile = model.getOntProperty(uri+"mobile");		 stmt = contactInformation.getProperty(mobile);		 cinfo.landline = stmt.getString();		 		 Property restaurant = model.getOntProperty(uri+"restaurant");		 stmt =  eating.getProperty(restaurant);					 Eateries.restaurant = stmt.getString();		 		Property cuisine = model.getOntProperty(uri+"cuisine");		stmt =  eating.getProperty(cuisine);		Eateries.cuisine = stmt.getString();					Property dish = model.getOntProperty(uri+"dish");			stmt =  eating.getProperty(dish);			Eateries.dish = stmt.getString();					 Property preference = model.getOntProperty(uri+"preference");			 stmt =  eating.getProperty(preference);			 Eateries.preference = stmt.getString();			 			 Property club = model.getOntProperty(uri+"club");			 stmt =  sports.getProperty(club);			 Sports.club = stmt.getString();						 Property sportsman = model.getOntProperty(uri+"sportsman");			 stmt =  sports.getProperty(sportsman);			 Sports.sportsman = stmt.getString();		 			 Property sport = model.getOntProperty(uri+"sport");			 stmt =  sports.getProperty(sport);			 Sports.sport =  stmt.getString();						 Property song = model.getOntProperty(uri+"song");			 stmt =  music.getProperty(song);			 Music.song = stmt.getString();					 Property genreMusic = model.getOntProperty(uri+"genreMusic");			 stmt =  music.getProperty(genreMusic);			 Music.genreMusic = stmt.getString();				 Property artist = model.getOntProperty(uri+"artist");			 			  stmt =  music.getProperty(artist);			  Music.artist =   stmt.getString();			  			  Property band = model.getOntProperty(uri+"band");			  stmt =  music.getProperty(band);			  Music.band =  stmt.getString();					 Property album = model.getOntProperty(uri+"album");			 stmt =  music.getProperty(album);			 Music.album = stmt.getString();									 				 Property genreReading = model.getOntProperty(uri+"genreReading");			 stmt =  reading.getProperty(genreReading);			 Reading.genreReading = stmt.getString();							 Property news = model.getOntProperty(uri+"news");			 stmt =  reading.getProperty(news);			 Reading.news = stmt.getString();								 Property magazine = model.getOntProperty(uri+"magazine");			 stmt =  reading.getProperty(magazine);			 Reading.magazine =  stmt.getString();							 Property book = model.getOntProperty(uri+"book");			 stmt =  reading.getProperty(book);			 Reading.book =  stmt.getString();								 Property blog = model.getOntProperty(uri+"blog");			 stmt =  reading.getProperty(blog);			 Reading.blog =  stmt.getString();					 Property author = model.getOntProperty(uri+"author");			 stmt =  reading.getProperty(author);			 Reading.author = stmt.getString();						 Property actor = model.getOntProperty(uri+"actor");			 			 stmt =  movies.getProperty(actor);			 Movies.actor = stmt.getString();			 			 Property actress = model.getOntProperty(uri+"actress");			  stmt =  movies.getProperty(actress);			  Movies.actress = stmt.getString();						 Property director = model.getOntProperty(uri+"director");				 stmt =  movies.getProperty(director);			 Movies.director = stmt.getString();						 Property movie = model.getOntProperty(uri+"movie");			 stmt =  movies.getProperty(movie);			 Movies.movie =  stmt.getString();				 Property genreMovie = model.getOntProperty(uri+"genreMovie");			 stmt =  movies.getProperty(genreMovie);			 Movies.genreMovie = stmt.getString();			 			profile.reading = Reading;			profile.hasLocation = loc;			profile.hascontactInfo = cinfo;			profile.movies = Movies;			profile.music = Music;			profile.sports = Sports;			profile.eateries = Eateries;		return profile;	 }	}